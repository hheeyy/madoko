Title         : Eclipse Che 使用教程
Author        : Heyi
Logo          : True
Package       : [UTF8]ctex

[TITLE]
***

# Eclipse Che 概述 

Eclipse Che是一款基于浏览器的在线集成开发环境（IDE），提供多种语言支持，如Java、C++、Python、MySQL等，本教程主要以Java语言为例，来解决VRP（Vehicle Routing Problem）及其变种问题。

# 注册登录
首先开启浏览器访问网址：<http://120.55.69.180:8080> ，注册后显示如下登录界面，输入账号密码进行登录。

!login

![login]

[login]: images/login.png "login" { width:auto; max-width:90% }

# Eclipse Che 界面

登录后显示eclipse che界面。

!eclipse che

![eclipse che]

[eclipse che]: images/eclipse-che.png "eclipse che" { width:auto; max-width:90% }

- *Organizations*

由管理者创建一个小组，由管理者和若干组员组成。管理员可以设置该小组工作空间数量、可同时运行的工作空间数量以及该小组内工作空间可使用的最大内存等。

组员可以与管理者共享工作空间，管理者可以设置组员对工作空间的使用权限，也有权限查看组员的工作空间，进行共享代码，并且可以进行代码的编辑、修改和调试等。

- *创建一个Workspace（以Java为例）*

Workspace是程序储存和运行调试的地方，类似于本地的eclipse。创建一个属于自己的workspace的步骤如下：

首先点击左侧菜单的Workspace，进入如下页面，可以看到此时已有两个工作空间存在及其一些属性。


![workspace1]

[workspace1]: images/workspace1.png "workspace1" { width:auto; max-width:90% }


接着点击 Add Workspace，出现如下页面。可以看到，workspace的名字用中文会报错，所以workspace的命名需要使用英文进行命名。在ORGANIZATION下拉框处可以选择workspace建立在哪一个小组下面，可选择与小组中的成员进行共享；该教程以Java语言为主，所以SELECT STACK处选择Java环境；RAM处可以调整该workspace的内存大小，默认是2GB；PROJECTS处可以预先在新建的workspace中添加或引入项目，也可以在建立workspace之后再进行这一操作，具体操作在4.3节中详述。
最后点击右上角或者是最下方的CREAT键，一个workspace就成功创建了。


![creat1]

[creat1]: images/creat1.png "creat1" { width:auto; max-width:90% }



![creat2]

[creat2]: images/creat2.png "creat2" { width:auto; max-width:90% }



![creat5]

[creat5]: images/creat5.png "creat5" { width:auto; max-width:90% }



这里要注意的一点是，如果希望自己所创建的workspace与其他人进行共享，那么还需要进行如下操作。

在菜单栏选择Workspace，可以看到在该账号上之前已经有两个workspace存在，选择新建立的workspace（test）；或者直接在上一步workspace创建成功的界面上点击Edit键，进入编辑模式。



![creat3]

[creat3]: images/creat3.png "creat3" { width:auto; max-width:90% }



![creat4]

[creat4]: images/creat4.png "creat4" { width:auto; max-width:90% }



点击Share，再点击Add Developer，勾选要进行分享的账号之后，点击Share后就完成了工作空间的分享。在PERMISSIONS下可以看到share的账户对该工作空间的使用权限，如是否可以对该工作空间的内容进行更改等。



![creat6]

[creat6]: images/creat6.png "creat6" { width:auto; max-width:90% }



![creat7]

[creat7]: images/creat7.png "creat7" { width:auto; max-width:90% }




![creat8]

[creat8]: images/creat8.png "creat8" { width:auto; max-width:90% }



#Workspace（以Java为例）

Workspace是程序存放和运行调试的空间，类似于本地的eclipse。
在左侧点击进入新建立的test工作空间。

##Workspace窗口

首先我们来看一下workspace的界面，界面由多个窗口组成，包括

- 菜单栏

- 工具栏

- 主界面

- 控制台

##Workspace菜单

这里简单一下workspace菜单的各个功能。

- Workspace

    *Import Project*    

    从外部引入一个项目

    *Creat Project*     

    建立一个新项目

    *Download as ZIP*   

    将当前项目存为本地压缩包（ZIP格式）

    *Stop*              

    停止运行当前工作空间

    *Status*            

    当前工作空间运行情况

    *Creat Factory*     

- Project

    *New*   

    新建文件夹或者各种类型的文件。

    *Upload File*   

    上传文件；选中文件夹后才会显示可点击。

    *Upload Folder*
    
    
    上传文件夹。这里要注意的一点是，上传的文件夹必须是以压缩包.ZIP的格式，如果是.RAR格式的压缩包则不能成功上传。

    *Configue Classpath*   
    
    Java build Path，向当前项目中添加JAR包或是添加文件夹Folder。

- run

    运行当前类。注意这里要选择有主类的class后运行，选择不含有主类的class运行会出错。

- debug

    对程序进行调试。

- Manage commands

    如果要修改run和debug执行语句，则可以在此处进行修改。


##如何开始写一个程序

###Create a project

Workspace --> Creat Project --> 输入新的Project的名字 --> 创建成功



###Import a project

Workspace --> Import Project --> 在URL处粘贴github某一具体项目的链接

!githubcopy

![githubcopy]

[githubcopy]: images/githubcopy.png "githubcopy" { width:auto; max-width:90% }

!github

![github]

[github]: images/github.png "github" { width:auto; max-width:90% }


假如github的respository是private的，则需要在URL的链接中插入账号密码等的信息，格式如下：

*http://username:password@github.com/username/respository.git*


###Add External Libraries（以GVRP为例）

- index

GVRP包索引概览，包括各个程序包的说明以及使用方法。

<http://120.55.69.180:8080/docs/index.html>

- frame

使用GVRP包求解VRP及其变种问题的框架如下图：

![frame1]

[frame1]: images/frame1.jpeg "frame1" { width:auto; max-width:100% }

在使用GVRP包解决VRP问题时，最重要的是明确目标函数以及约束条件，其次是算法的选择、算子的选择以及参数的调整。

**第一步：判断是否为基础VRP问题，算例中有无其他特殊变量，并实现加载算例函数**

基础VRP问题，比如CVRP、VRPTW问题，可以直接使用GVRP包中的Instance类，Instance类中提供了基础VRP问题所需要的基本数据。如果是VRP变种问题，比如EVRP(Electric Vehicle Routing Problem)问题,则需要定义一些特殊变量，比如电动车的电池容量、最长行驶距离等，此时就需要在继承基础Instance类的基础之上，实现该特殊问题的InstanceVariant类。

在确定该VRP问题需要的算例变量及数据之后，需要实现加载算例数据的函数。不同算例的格式可能是不一样的，所以应该根据算例的特性来对加载算例函数（load_Instance()）进行适当的修改。

**第二步：确定目标函数以及约束条件**

解决VRP问题首先要明确目标函数是什么，是最小化行驶距离，最小化总成本，最大化收益，或者是使策略中使用的车辆数目最少等等。目标函数不同，那么相同的解的质量也不同，算法优化的方向也会不同。

其次，要确定该问题的约束条件有哪些，以及该约束条件是否可以松弛（relax）。约束条件松弛的意思是，在构造解及优化解的过程中可以违反该约束条件，但是得相应付出与违反值成比的惩罚成本，违反的值越大，惩罚成本越高，惩罚成本与目标函数值用于评判一个解的优劣。一般而言，松弛的约束条件越多，能够得到的解越优，但是松弛条件多，邻域搜索空间变大，同等迭代次数情况下，相应的计算时间也会更多。另外，松弛条件越多


**第三步：构造初始解**

在GVRP包中构造初始解使用的是贪心（Greedy）算法，Greedy类适用的是只有一种车型的VRP问题，GreedyGeneral类适用于多车型多仓库的问题。在约束条件松弛的情况下，初始解不一定是可行解。

**第四步：选择算子**

算子用于对当前解进行操作从而获得另一个解。GVRP包中提供了三种算法的算子集。

在构造初始解时，需要用到InitialSolutionOperator包中Insert算子，用于贪心算法构造初始解。该程序包中提供了基础VRP问题的插入算法（InsertBase）、Cluster问题的插入算法（InsertCluster）、EVRP（Electric Vehicle Routing Problem）的插入算法（InsertElectric）、PDP（Pickup and Delivery）问题的插入算法（InsertPD）以及SD（Split Delivery）问题的插入算法（InsertSD）。假如是其他VRP问题需要用到特殊的Insert算子，可以在eclipse che中重新写一个Insert类，在主类中调用该Insert类即可。


**第五步：选择优化算法**

在GVRP包中提供了

**第六步：调整默认参数进一步优化解**


- CVRP实现代码

```java
  
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import nju.lzx.Constraint.*;
import nju.lzx.Data.*;
import nju.lzx.Algorithm.*;
import nju.lzx.Interface.*;
import nju.lzx.LocalSearchOperator.*;
import nju.lzx.InitialSolutionOperator.*;
import nju.lzx.Utility.*;
import nju.lzx.Route.*;
import nju.lzx.LabelSetting.*;


// TODO: Auto-generated Javadoc
/**
 * Capacitied Vehicle Routing Problem (CVRP)求解示例。 (目标是最小化总距离。).
 */
public class CVRP {

	
	/**
	 * CVRP算例。
	 */
	public static class InstanceCVRP extends Instance{
		
		/*
           这是最简单的VRP问题，是基础的Instance，不需要额外的变量；如果需要额外的变量则在这里进行声明
		 */
		
	}
	
	/**
	 * 主函数。.
	 *
	 * @param args 参数。
	 * @throws IOException IO异常。
	 */
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		double t1 = System.nanoTime();
        // PrintStream ps = new PrintStream(new FileOutputStream("../result/log.txt"));//文件重定向，将在控制台输出的信息另存为txt文件，便于查看结果
        //System.setOut(ps);
		Instance inst = load_instance("../data/cvrp/vrpnc1.txt");//加载算例
		double t2 = System.nanoTime();
		double load_instance_time = (t2 - t1) / 1e9;
		////设置模式参数
		inst.parameter.Mode.multi_trip_enable = false;//中途不可重新回到depot再次出发
		inst.parameter.Mode.multi_thread_enable = false;
		System.setProperty("java.util.concurrent.ForkJoinPool.common.parallelism", "8");
		//设置初始解参数
		inst.parameter.InitialSolution.log_print = false;
		//设置禁忌搜索参数
		inst.parameter.TabuSearch.maximum_iteration = 1000;
		inst.parameter.TabuSearch.maximum_tabu_tenure = 500;
		inst.parameter.TabuSearch.tenure_decay_rate = 0.99;
		inst.parameter.TabuSearch.mininum_tabu_tenure = 10;
		inst.parameter.TabuSearch.mininum_shake_tenure = 300;
		inst.parameter.TabuSearch.minimum_shake_iteration = 100;
		inst.parameter.TabuSearch.label_setting_tenure = 500;
		inst.parameter.TabuSearch.log_print = false;
		inst.parameter.TabuSearch.log_detail = false;
		//设置算子参数
		inst.parameter.Operator.insertion_prune_threshhold = 1e6;
		inst.parameter.Operator.exchange_prune_threshhold = 1e6;
		inst.parameter.Operator.cross_prune_threshhold = 1e6;
		inst.parameter.Operator.remove_prune_threshhold = -1e6;
		inst.parameter.Operator.route_cross_threshhold = 100;
		
		
		//构造约束条件
		Constraint[] cnts = new Constraint[2];
		MinimizeDistance.ConstraintData dist_dat = new MinimizeDistance.ConstraintData(inst.d, 1);//每公里行驶成本设为1,则将距离作为目标函数
		cnts[0] = new MinimizeDistance(dist_dat, 1);
		
		CapacityConstraint.ConstraintData capw_dat = new CapacityConstraint.ConstraintData(inst.q, inst.Q);
		cnts[1] = new CapacityConstraint(capw_dat, true, 1000);//将该约束设为松弛,惩罚系数设为1000
		
		//构造需要访问的节点集合
		ArrayList<Atr> atrs = new ArrayList<Atr>();
		for(int i = 1; i < inst.n; i++){
			atrs.add(new Atr(i));
		}
		boolean[] exc = new boolean[inst.n];
		for(int i = 1; i < inst.n; i++)
			exc[i] = true;
		
		//构造算法算子, 禁忌搜索中使用的算子,可以选择一个到多个
		Operator[] operators = new Operator[3];
		double[] coefs = new double[3];
		operators[0] = new RelocateBase(inst, exc);
		coefs[0] = 1;
		operators[1] = new ExchangeBaseDeep(inst, exc);
		coefs[1] = 1;
		operators[2] = new CrossBase(inst, exc);
		coefs[2] = 1;       
    
	
	    //构造初始解,贪心算法
	    InsertBase insert = new InsertBase(inst, cnts);//构造初始解的插入算子
		Greedy greedy = new Greedy(inst, insert);//构造初始解
		
		ArrayList<Route> s = greedy.generate(atrs);
		s = toDeep(inst, s);
		
		System.out.println(greedy.toString(s));//将初始解的路径转化为子路径,为了使用ExchangeBaseDeep算子
		greedy.check(s, true, exc);
		System.out.println("feasibility of the initial solution>>>" + greedy.is_feasible(s) + "\t" + s.size() + "\t" + greedy.get_total_cost(s));
		double t3 = System.nanoTime();
		double initial_construct_time = (t3 - t2) / 1e9;
		System.out.println("load instance time>>>" + load_instance_time + "\t initial construct time>>>" + initial_construct_time);
		//System.exit(0);
		 
		
		//优化解的成本
		TabuSearch tabu = new TabuSearch(inst, operators, coefs, null);
		ArrayList<Route> bs = tabu.solve(s);

		tabu.check(bs, true, exc);
		System.out.println("feasibility of the solution>>>" + tabu.is_feasible(bs) + "\t" + bs.size() + "\t" + tabu.get_total_cost(bs));
		//System.out.println(tabu.toString(bs));
		double t4 = System.nanoTime();
		System.out.println("computation time>>>" + (t4 - t1) / 1e9);
		inst.statistics.print();
		write_solution("../result/vrpnc1.txt", bs, (t4 - t1) / 1e9);
	}
	
	/**
	 * 加载算例。.
	 *
	 * @param node_file 节点信息文件路径。
	 * @param vehicle_file 车辆信息文件路径。
	 * @param dist_file 距离信息文件路径。
	 * @return 返回算例。
	 * @throws FileNotFoundException IO异常。
	 */
	public static Instance load_instance(String node_file) throws FileNotFoundException{
		//node information
		Instance inst = new Instance();
		//inst.m = _m;
		Scanner cin = new Scanner(new BufferedReader(new FileReader(node_file)));
		inst.n = cin.nextInt() + 1;
		inst.Q = cin.nextDouble();
		//inst.T = _T;
		inst.lng = new double[inst.n];
		inst.lat = new double[inst.n];
		inst.q = new double[inst.n];
		inst.s = new double[inst.n];
		inst.T = cin.nextDouble();
		//cin.next();
        double st = cin.nextDouble();
		for(int i = 0; i < inst.n; i++){
			inst.lng[i] = cin.nextDouble();
			inst.lat[i] = cin.nextDouble();
			if(i > 0){
				inst.q[i] = cin.nextDouble();
				inst.s[i] = st;
			}
		}
		cin.close();
		inst.d = new double[inst.n][inst.n];
		inst.t = new double[inst.n][inst.n];
		for(int i = 0; i < inst.n; i++){
			for(int j = i + 1; j < inst.n; j++){
				inst.d[i][j] = inst.d[j][i] = inst.t[i][j] = inst.t[j][i] = 
						Math.sqrt((inst.lng[i] - inst.lng[j]) * (inst.lng[i] - inst.lng[j]) + (inst.lat[i] - inst.lat[j]) * (inst.lat[i] - inst.lat[j]));
			}
		}
		return inst;
	}
	
	/**
	 * 将一个普通的解转换成一个可以被ExchangeBaseDeep和RelocateBseIntra操作的解，即路径中包含子路径。.
	 *
	 * @param inst 算例信息。
	 * @param s 当前解。
	 * @return 返回新的解。
	 */
	public static ArrayList<Route> toDeep(Instance inst, ArrayList<Route> s){
		ArrayList<Route> ns = new ArrayList<Route>();
		for(int i = 0; i < s.size(); i++){
			Route r = s.get(i);
			Reference ref = r.get_reference();
			Route nr = new RouteBase(inst, ref.len, ref.seq, false, true);
			Constraint[] _cnts = r.get_constraints();
			Constraint[] _cnts2 = new Constraint[_cnts.length];
			for(int j = 0; j < _cnts.length; j++){
				_cnts2[j] = _cnts[j].copy(nr.get_reference());
			}
			nr.add_constraints(_cnts2);
			nr.check();
			ns.add(nr);
		}
		return ns;
	}
	
	
	
	/**
	 * 将解保存到文件。.
	 *
	 * @param file 文件名称。
	 * @param s 当前解。
	 * @throws IOException I/O异常。
	 */
	public static void write_solution(String file, ArrayList<Route> s, double time) throws IOException{
		BufferedWriter out = new BufferedWriter(new FileWriter(file));
		double total_cost = 0;
		for(int i = 0; i < s.size(); i++){
			total_cost += s.get(i).get_total_cost();
		}
		out.write(s.size() + " " + total_cost + " " + time);
		out.newLine();
		for(int i = 0; i < s.size(); i++){
			Route r = s.get(i);
			for(int j = 0; j < r.get_size(); j++){
				int id = r.get_node(j);
				out.write(id + " ");
			}
			out.newLine();
		}
		out.close();
	}
	
	/**
	 * 从文件中加载解。.
	 *
	 * @param inst 算例信息。
	 * @param cnts 问题约束条件集合。
	 * @param path 解的文件路径。
	 * @return the array list
	 * @throws FileNotFoundException the file not found exception
	 */
	public static ArrayList<Route> load_solution(Instance inst, Constraint[] cnts, String path) throws FileNotFoundException{
		ArrayList<Route> rs = new ArrayList<Route>();
		Scanner cin = new Scanner(new BufferedReader(new FileReader(path)));
		cin.nextLine();
		while(cin.hasNextLine()){
			String line = cin.nextLine();
			String[] subs = line.split(" ");
			int[] seq = new int[subs.length];
			for(int i = 1; i < subs.length; i++){
				seq[i] = Integer.parseInt(subs[i]);
			}
			RouteBase r = new RouteBase(inst, subs.length, seq, false, true);
			Constraint[] _cnts = new Constraint[cnts.length];
			for(int j = 0; j < cnts.length; j++){
				_cnts[j] = cnts[j].copy(r.get_reference());
			}
			r.add_constraints(_cnts);
			rs.add(r);
		}
		cin.close();
		return rs;
	}
}

```
- VRPTW实现代码

```java
  
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import nju.lzx.Constraint.*;
import nju.lzx.Data.*;
import nju.lzx.Algorithm.*;
import nju.lzx.Interface.*;
import nju.lzx.LocalSearchOperator.*;
import nju.lzx.InitialSolutionOperator.*;
import nju.lzx.Utility.*;
import nju.lzx.Route.*;
import nju.lzx.LabelSetting.*;


// TODO: Auto-generated Javadoc
/**
 * Vehicle Routing Problem with Time Windows(VRPTW)求解示例。 (目标是最小化总行驶距离。).
 */
public class VRPTW {

	
	/**
	 * VRPTW算例。
	 */
	public static class InstanceVRPTW extends Instance{

		
	}
	
	/**
	 * 主函数。.
	 *
	 * @param args 参数。
	 * @throws IOException IO异常。
	 */
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		double t1 = System.nanoTime();
		String name = "c102";
		String file = "../data/Solomon/" + name + ".txt";
		Instance inst = load_instance(file, 100);
		double t2 = System.nanoTime();
		double load_instance_time = (t2 - t1) / 1e9;
		////设置模式参数
		inst.parameter.Mode.multi_trip_enable = true;
		inst.parameter.Mode.multi_thread_enable = false;
		System.setProperty("java.util.concurrent.ForkJoinPool.common.parallelism", "8");
		//设置初始解参数
		inst.parameter.InitialSolution.log_print = false;
		//设置禁忌搜索参数
		inst.parameter.TabuSearch.maximum_iteration = 1000;
		inst.parameter.TabuSearch.maximum_tabu_tenure = 500;
		inst.parameter.TabuSearch.tenure_decay_rate = 0.99;
		inst.parameter.TabuSearch.mininum_tabu_tenure = 10;
		inst.parameter.TabuSearch.mininum_shake_tenure = 300;
		inst.parameter.TabuSearch.minimum_shake_iteration = 100;
		inst.parameter.TabuSearch.label_setting_tenure = 500;
		inst.parameter.TabuSearch.log_print = false ;
		inst.parameter.TabuSearch.log_detail = false;
		//设置算子参数
		inst.parameter.Operator.insertion_prune_threshhold = 1e6;
		inst.parameter.Operator.exchange_prune_threshhold = 1e6;
		inst.parameter.Operator.cross_prune_threshhold = 1e6;
		inst.parameter.Operator.remove_prune_threshhold = -1e6;
		inst.parameter.Operator.route_cross_threshhold = 100;
		//构造约束条件
		Constraint[] cnts = new Constraint[3];
		MinimizeDistance.ConstraintData dist_dat = new MinimizeDistance.ConstraintData(inst.d, 1);
		cnts[0] = new MinimizeDistance(dist_dat, 1);
		
		CapacityConstraint.ConstraintData capw_dat = new CapacityConstraint.ConstraintData(inst.q, inst.Q);
		cnts[1] = new CapacityConstraint(capw_dat, true, 500);
		
		TimeWindowConstraint.ConstraintData tw_dat = new TimeWindowConstraint.ConstraintData(inst.e, inst.l, inst.t, inst.s);
		cnts[2] = new TimeWindowConstraint(tw_dat, true, 500);
		
		//构造需要访问的节点集合
		ArrayList<Atr> atrs = new ArrayList<Atr>();
		for(int i = 1; i < inst.n; i++){
			atrs.add(new Atr(i));
		}
		boolean[] exc = new boolean[inst.n];
		for(int i = 1; i < inst.n; i++)
			exc[i] = true;
		
		//构造算法算子
		Operator[] operators = new Operator[3];
		double[] coefs = new double[3];
		operators[0] = new RelocateBase(inst, exc);
		coefs[0] = 1;
		operators[1] = new ExchangeBaseDeep(inst, exc);
		coefs[1] = 1;
		operators[2] = new CrossBase(inst, exc);
		coefs[2] = 1;
		
		//构造初始解
		InsertBase insert = new InsertBase(inst, cnts);//构造初始解的插入算子
		Greedy greedy = new Greedy(inst, insert);//构造初始解
		
		ArrayList<Route> s = greedy.generate(atrs);
		s = toDeep(inst, s);
		
		//ArrayList<Route> s = load_solution(inst, cnts, "result/result.txt");
		System.out.println(greedy.toString(s));
		greedy.check(s, true, exc);
		System.out.println("feasibility of the initial solution>>>" + greedy.is_feasible(s) + "\t" + s.size() + "\t" + greedy.get_total_cost(s));
		double t3 = System.nanoTime();
		double initial_construct_time = (t3 - t2) / 1e9;
		System.out.println("load instance time>>>" + load_instance_time + "\t initial construct time>>>" + initial_construct_time);
		//System.exit(0);
		 
		
		//优化解的成本
		TabuSearch tabu = new TabuSearch(inst, operators, coefs, null);
		ArrayList<Route> bs = tabu.solve(s);

		tabu.check(bs, true, exc);
		System.out.println("feasibility of the solution>>>" + tabu.is_feasible(bs) + "\t" + bs.size() + "\t" + greedy.get_total_cost(bs));
		//System.out.println(tabu.toString(bs));
		double t4 = System.nanoTime();
		System.out.println("computation time>>>" + (t4 - t1) / 1e9);
		inst.statistics.print();
		write_solution("../result/solomon/" + name +".txt", bs);
	}
	
	/**
	 * S 2 t.
	 *
	 * @param t the t
	 * @return the double
	 */
	public static double s2t(String t){
		String[] sub = t.split(":");
		int hour = Integer.parseInt(sub[0]);
		int min = Integer.parseInt(sub[1]);
		if(hour == 0 && min == 0)
			hour = 24;
		return hour * 60 + min;
	}

	
	/**
	 * 加载算例。.
	 *
	 * @param node_file 节点信息文件路径。
	 * @param vehicle_file 车辆信息文件路径。
	 * @param dist_file 距离信息文件路径。
	 * @return 返回算例。
	 * @throws FileNotFoundException IO异常。
	 */
	public static Instance load_instance(String path, int _n) throws FileNotFoundException{
		Instance inst = new Instance();
		Scanner cin = new Scanner(new BufferedReader(new FileReader(path)));
		inst.name = cin.next();
		for(int i = 0; i < 3; i++){
			cin.next();
		}
		inst.m = cin.nextInt();//车辆数目，Solomon中有提供。
		inst.Q = cin.nextDouble();
		for(int i = 0; i < 12; i++){
			cin.next();
		}
		inst.n = _n + 1;
		inst.s = new double[inst.n];
		inst.e = new double[inst.n];
		inst.l = new double[inst.n];
		inst.q = new double[inst.n];
		inst.lng = new double[inst.n];
		inst.lat = new double[inst.n];
		for(int i = 0; i < inst.n; i++){
			cin.next();
			inst.lng[i] = cin.nextDouble();
			inst.lat[i] = cin.nextDouble();
			inst.q[i] = cin.nextDouble();
			inst.e[i] = cin.nextDouble();
			inst.l[i] = cin.nextDouble();
			inst.s[i] = cin.nextDouble();
		}
		cin.close();
		inst.d = new double[inst.n][inst.n];
		inst.t = new double[inst.n][inst.n];
		for(int i = 0; i < inst.n; i++){
			for(int j = i + 1; j < inst.n; j++){
				inst.d[i][j] = inst.d[j][i] = inst.t[i][j] = inst.t[j][i] = 
						Math.sqrt((inst.lng[i] - inst.lng[j]) * (inst.lng[i] - inst.lng[j]) + (inst.lat[i] - inst.lat[j]) * (inst.lat[i] - inst.lat[j]));
			}
		}
		return inst;
	}
	
	/**
	 * 将一个普通的解转换成一个可以被ExchangeBaseDeep和RelocateBseIntra操作的解，即路径中包含子路径。.
	 *
	 * @param inst 算例信息。
	 * @param s 当前解。
	 * @return 返回新的解。
	 */
	public static ArrayList<Route> toDeep(Instance inst, ArrayList<Route> s){
		ArrayList<Route> ns = new ArrayList<Route>();
		for(int i = 0; i < s.size(); i++){
			Route r = s.get(i);
			Reference ref = r.get_reference();
			Route nr = new RouteBase(inst, ref.len, ref.seq, false, true);
			Constraint[] _cnts = r.get_constraints();
			Constraint[] _cnts2 = new Constraint[_cnts.length];
			for(int j = 0; j < _cnts.length; j++){
				_cnts2[j] = _cnts[j].copy(nr.get_reference());
			}
			nr.add_constraints(_cnts2);
			nr.check();
			ns.add(nr);
		}
		return ns;
	}
	
	
	
	/**
	 * 将解保存到文件。.
	 *
	 * @param file 文件名称。
	 * @param s 当前解。
	 * @throws IOException I/O异常。
	 */
	public static void write_solution(String file, ArrayList<Route> s) throws IOException{
		BufferedWriter out = new BufferedWriter(new FileWriter(file));
		double total_cost = 0;
		for(int i = 0; i < s.size(); i++){
			total_cost += s.get(i).get_total_cost();
		}
		out.write(s.size() + " " + total_cost);
		out.newLine();
		for(int i = 0; i < s.size(); i++){
			Route r = s.get(i);
			for(int j = 0; j < r.get_size(); j++){
				int id = r.get_node(j);
				out.write(id + " ");
			}
			out.newLine();
		}
		out.close();
	}
	
	/**
	 * 从文件中加载解。.
	 *
	 * @param inst 算例信息。
	 * @param cnts 问题约束条件集合。
	 * @param path 解的文件路径。
	 * @return the array list
	 * @throws FileNotFoundException the file not found exception
	 */
	public static ArrayList<Route> load_solution(Instance inst, Constraint[] cnts, String path) throws FileNotFoundException{
		ArrayList<Route> rs = new ArrayList<Route>();
		Scanner cin = new Scanner(new BufferedReader(new FileReader(path)));
		cin.nextLine();
		while(cin.hasNextLine()){
			String line = cin.nextLine();
			String[] subs = line.split(" ");
			int[] seq = new int[subs.length];
			for(int i = 1; i < subs.length; i++){
				seq[i] = Integer.parseInt(subs[i]);
			}
			RouteBase r = new RouteBase(inst, subs.length, seq, false, true);
			Constraint[] _cnts = new Constraint[cnts.length];
			for(int j = 0; j < cnts.length; j++){
				_cnts[j] = cnts[j].copy(r.get_reference());
			}
			r.add_constraints(_cnts);
			rs.add(r);
		}
		cin.close();
		return rs;
	}


}
  
```

- FCM-VRP

该问题是考虑燃料消耗的车辆路径问题，和最基本的VRP问题之间最大的区别是

```java
    PrintStream ps = new PrintStream(new FileOutputStream("../result/log.txt"));
    //文件重定向，将在控制台输出的信息另存为txt文件，便于查看结果
    System.setOut(ps);
```
